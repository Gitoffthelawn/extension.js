name: Release â€“ Stable (Tags)

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write
  deployments: write

jobs:
  publish:
    runs-on: ubuntu-22.04
    environment: stable
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup
        with:
          node-version: '18'

      - name: Build and test
        run: |
          pnpm turbo run compile
          pnpm turbo run test

      - name: Configure npm auth (stable tag)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN

      - name: Debug npm auth (stable tag)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Registry: $(npm config get registry)"
          npm whoami || true
          test -n "$NODE_AUTH_TOKEN" || (echo "NODE_AUTH_TOKEN missing" && exit 1)

      - name: Publish public packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm -r --filter ./programs/cli --filter ./programs/create --filter ./programs/develop \
            publish --access public --provenance --no-git-checks

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }}

      - name: Render aggregated changelog
        id: agg
        run: |
          node ./scripts/render-aggregated-changelog.cjs > aggregated.md || true
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "### Aggregated package changelog" >> $GITHUB_OUTPUT
          cat aggregated.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Append to this tag's GitHub Release body
        uses: actions/github-script@v7
        env:
          TAG: ${{ github.ref_name }}
          AGG_BODY: ${{ steps.agg.outputs.body }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = process.env.TAG;
            const agg = process.env.AGG_BODY || '';
            const toName = (tag) => {
              const version = (tag || '').replace(/^v/, '');
              const d = new Date();
              const month = d.toLocaleString('en-US', { month: 'long' });
              const day = String(d.getDate()).padStart(2, '0');
              const year = d.getFullYear();
              return `${version} (${month} ${day}, ${year})`;
            };
            const releaseName = toName(tag);
            let rel;
            try {
              rel = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
            } catch (err) {
              if (err && err.status === 404) {
                // Create a release if it doesn't exist yet (e.g., tag just pushed)
                rel = await github.rest.repos.createRelease({
                  owner,
                  repo,
                  tag_name: tag,
                  name: releaseName,
                  body: agg,
                  draft: false,
                  prerelease: false,
                  generate_release_notes: true
                });
                return;
              }
              throw err;
            }
            const current = rel.data.body || '';
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: rel.data.id,
              body: current ? `${current}\n\n${agg}` : agg,
              name: releaseName,
              draft: false,
              prerelease: false
            });

      - name: Collect versions
        id: versions
        run: |
          node -e "const fs=require('fs');function v(p){return JSON.parse(fs.readFileSync(p,'utf8')).version;}const obj={'extension':v('programs/cli/package.json'),'extension-create':v('programs/create/package.json'),'extension-develop':v('programs/develop/package.json')};process.stdout.write('versions='+JSON.stringify(obj));" >> $GITHUB_OUTPUT

      - name: Create deployment (stable)
        uses: actions/github-script@v7
        env:
          VERSIONS: ${{ steps.versions.outputs.versions }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const payload = { channel: 'stable', versions: JSON.parse(process.env.VERSIONS || '{}') };
            const ref = context.sha;
            const dep = await github.rest.repos.createDeployment({
              owner, repo, ref,
              environment: 'stable',
              auto_merge: false,
              required_contexts: [],
              transient_environment: false,
              description: `Published to npm (stable)`,
              payload: JSON.stringify(payload)
            });
            const ext = payload.versions['extension'];
            const envUrl = ext ? `https://www.npmjs.com/package/extension/v/${ext}` : undefined;
            const desc = `extension ${payload.versions['extension']}, extension-create ${payload.versions['extension-create']}, extension-develop ${payload.versions['extension-develop']}`;
            await github.rest.repos.createDeploymentStatus({
              owner, repo, deployment_id: dep.data.id,
              state: 'success',
              log_url: `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`,
              environment_url: envUrl,
              description: desc
            })


